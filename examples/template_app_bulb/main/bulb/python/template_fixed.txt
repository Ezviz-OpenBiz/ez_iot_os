ez_int32_t tsl_notice(ez_tsl_event_e event_type, ez_void_t *data, ez_int32_t len)
{
    return 0;
}

int user_property_report(char *key)
{
    int ret = 0;
    int i = 0;
    char dev_serial[72] = {0};
    ez_tsl_rsc_t rsc_info = {.res_type = NULL, .local_index = NULL};  
    ez_tsl_key_t key_info = {.domain = NULL,.key = NULL};

    if (NULL == key )
    {
        ezlog_e(TAG_AP, "property param error.");
        return -1;
    }

    sprintf(dev_serial, "%s:%s", get_lic_productKey(), get_lic_deviceName());

    for (i = 0; property_cmd[i].identify != NULL; i++)
    {
        if (strncmp(key, property_cmd[i].identify, IDENTIFIER_LEN_MAX) == 0) /* 匹配功能点 */
        {
            break;
        }
    }

    if (NULL != property_cmd[i].identify)
    {
              
        /**
		* @brief 云端下发属性，且设备的属性已变化，应该执行主动上报。
		* 
		*/
 
        printf("\n to_do DEBUG in line (%d) and function (%s)): \n ",__LINE__, __func__);
        rsc_info.res_type = property_cmd[i].res_type;
        rsc_info.local_index = property_cmd[i].index;

        key_info.domain = property_cmd[i].domain;
        key_info.key = key;

        ez_iot_tsl_property_report(dev_serial, &rsc_info, &key_info, NULL);
    }
    else
    {
        ret = -1;
        ezlog_w(TAG_AP, "property[%s] do not realize set to dev!!\n", key);
    }

    return ret;
    
}

/**
 * @brief 物模型操作回调函数
 * @param[in] sn :sdk 回调出来资源通道信息，灯类可以不处理。
 * @param[in] rsc_info :sdk 回调出来资源通道信息，灯类可以不处理。
 * @param[in] key_info :sdk 回调出来领域功能点信息，必须处理。
 * @param[in] value_in :sdk 回调出来功能点具体值信息，必须处理
 * @param[out] value_out :函数处理后返回给sdk 的值，可以不处理。无值返回时，sdk action 底层会补充一个0或者-1 code 给平台
 * @return :成功SUCCESS/失败返回:ERROR
 * @note: 
 */
ez_int32_t tsl_things_action2dev(const ez_int8_t *sn, const ez_tsl_rsc_t *rsc_info, const ez_tsl_key_t *key_info,

                                 const ez_tsl_value_t *value_in, ez_tsl_value_t *value_out)
{
    int ret = 0;
    int i = 0;
    if (NULL == key_info || NULL == value_out)
    {
        ezlog_e(TAG_AP, "things action2dev param error.");
        return -1;
    }

    for (i = 0; action_cmd[i].identify != NULL; i++)
    {
        if (strncmp(key_info->key, action_cmd[i].identify, IDENTIFIER_LEN_MAX) == 0) /* 匹配功能点 */
        {
            break;
        }
    }
    if (NULL != action_cmd[i].identify)
    {
        ret = action_cmd[i].func_set(value_in, value_out);
    }
    else
    {
        ezlog_w(TAG_AP, "action[%s] do not realize!!\n", key_info->key);
    }
    return ret;
}

/**
 * @brief 物模型属性设置回调函数
 * @param[in] sn :sdk 回调出来资源通道信息，灯类可以不处理。
 * @param[in] rsc_info :sdk 回调出来资源通道信息，灯类可以不处理。
 * @param[in] key_info :sdk 回调出来领域功能点信息，必须处理。
 * @param[in] value_out :sdk 回调出来领域功能点具体值信息，必须处理
 * @return :成功SUCCESS/失败返回:ERROR
 * @note: 此函数执行不应该阻塞，相关业务处理若有时间较长应开启另一个线程任务处理
 */
ez_int32_t tsl_things_property2dev(const ez_int8_t *sn, const ez_tsl_rsc_t *rsc_info, const ez_tsl_key_t *key_info, ez_tsl_value_t *value_out)
{
    int ret = 0;
    int i = 0;

    if (NULL == key_info || NULL == value_out)
    {
        ezlog_e(TAG_AP, "things report2dev param error.");
        return -1;
    }

    for (i = 0; property_cmd[i].identify != NULL; i++)
    {
        if (strncmp(key_info->key, property_cmd[i].identify, IDENTIFIER_LEN_MAX) == 0) /* 匹配功能点 */
        {
            break;
        }
    }

    if (NULL != property_cmd[i].identify)
    {
        ret = property_cmd[i].func_set(value_out);

        /* @brief 云端下发属性，且设备的属性已变化，应该执行主动上报。
        ez_iot_tsl_property_report()接口传NULL 值，sdk会调用tsl_things_property2cloud上报属性值，
        采用这种方式的好处是将上报时机交由sdk来处理，sdk 不需要缓存value值，在网络拥塞的情况下更为合适。
        */
       
         ez_iot_tsl_property_report(sn, rsc_info, key_info, NULL);            

    }
    else
    {
        ret = -1;
        ezlog_w(TAG_AP, "property[%s] do not realize set to dev!!\n", key_info->key);
    }

    return ret;
}

/**
 * @brief 物模型属性同步回调函数
 * @param[in] sn :sdk 回调出来资源通道信息，灯类可以不处理。
 * @param[in] rsc_info :sdk 回调出来资源通道信息，灯类可以不处理。
 * @param[in] key_info :sdk 回调出来领域功能点信息，必须处理。
 * @param[in] value_in :sdk 回调出来功能点具体值信息，必须处理
 * @param[out] value_out :函数处理后的属性值返回给sdk，必须处理，内存由sdk 进行释放
 * @return :成功SUCCESS/失败返回:ERROR
 * @note: SDK 24小时会强制执行同步设备的属性给平台，会遍历所有功能点回调此函数
 */
ez_int32_t tsl_things_property2cloud(const ez_int8_t *sn, const ez_tsl_rsc_t *rsc_info, const ez_tsl_key_t *key_info, ez_tsl_value_t *value_out)
{
    int ret = 0;
    int i;
    if (NULL == key_info || NULL == value_out)
    {
        ezlog_e(TAG_AP, "things property2cloud param error.");
        return -1;
    }

    for (i = 0; property_cmd[i].identify != NULL; i++)
    {
        if (strncmp(key_info->key, property_cmd[i].identify, IDENTIFIER_LEN_MAX) == 0) /* 匹配功能点 */
        {
            break;
        }
    }

    if (NULL != property_cmd[i].identify)
    {
        ret = property_cmd[i].func_up(value_out);
    }
    else
    {
        ezlog_w(TAG_AP, "property[%s] do not realize up to cloude!!\n", key_info->key);
    }
    return ret;
}
